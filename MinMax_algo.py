# -*- coding: utf-8 -*-
"""22141018_MD Fuyad Ibnay Rafi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16dPxZtYa40vged2ttJ3lvU9kl2_GOWKb
"""

import math
import random

class AlphaBetaPruner:
    def __init__(self, max_strength, min_strength):
        self.max_strength = max_strength
        self.min_strength = min_strength

    def strength(self, x):
        return math.log2(x + 1) + x / 10

    def calculate_utility(self):
        t = random.randint(0, 1)
        rand_val = random.randint(1, 10)
        base = self.strength(self.max_strength) - self.strength(self.min_strength)
        random_component = ((-1) ** t) * (rand_val / 10)
        return base + random_component

    def alphabeta(self, depth, alpha, beta, maximizing_player):
        if depth == 5:
            return self.calculate_utility()

        value = -math.inf if maximizing_player else math.inf
        for _ in range(2):
            child_value = self.alphabeta(depth + 1, alpha, beta, not maximizing_player)
            value = max(value, child_value) if maximizing_player else min(value, child_value)
            alpha = max(alpha, value) if maximizing_player else alpha
            beta = min(beta, value) if not maximizing_player else beta
            if alpha >= beta:
                break
        return value

class GameSimulator:
    def __init__(self, initial_starting_player, carlsen_strength, caruana_strength):
        self.initial_starting_player = initial_starting_player
        self.carlsen_strength = carlsen_strength
        self.caruana_strength = caruana_strength
        self.results = {'Magnus Carlsen': 0, 'Fabiano Caruana': 0, 'Draws': 0}

    def toggle_player(self, player):
        return 1 - player

    def determine_max_min_strengths(self, game_number):
        starting_player = self.initial_starting_player if (game_number - 1) % 2 == 0 else self.toggle_player(self.initial_starting_player)
        return (self.carlsen_strength, self.caruana_strength) if starting_player == 0 else (self.caruana_strength, self.carlsen_strength)

    def run_game(self, game_number):
        max_strength, min_strength = self.determine_max_min_strengths(game_number)
        pruner = AlphaBetaPruner(max_strength, min_strength)
        return pruner.alphabeta(0, -math.inf, math.inf, True)

    def simulate_games(self):
        for i in range(4):
            game_num = i + 1
            utility = self.run_game(game_num)
            max_strength, min_strength = self.determine_max_min_strengths(game_num)
            players = {self.carlsen_strength: 'Magnus Carlsen', self.caruana_strength: 'Fabiano Caruana'}
            max_player = players[max_strength]
            min_player = players[min_strength]

            if utility > 0:
                self.results[max_player] += 1
                winner = f"{max_player} (Max)"
            elif utility < 0:
                self.results[min_player] += 1
                winner = f"{min_player} (Min)"
            else:
                self.results['Draws'] += 1
                winner = "Draw"

            print(f"Game {game_num} Winner: {winner} (Utility value: {utility:.2f})")

        print("\nOverall Results:")
        print(f"Magnus Carlsen Wins: {self.results['Magnus Carlsen']}")
        print(f"Fabiano Caruana Wins: {self.results['Fabiano Caruana']}")
        print(f"Draws: {self.results['Draws']}")

        if self.results['Magnus Carlsen'] > self.results['Fabiano Caruana']:
            print("Overall Winner: Magnus Carlsen")
        elif self.results['Fabiano Caruana'] > self.results['Magnus Carlsen']:
            print("Overall Winner: Fabiano Caruana")
        else:
            print("Overall Winner: Draw")

print('FAIR CHESS GAME')
print()

starting_player = int(input("Enter starting player for game 1 (0 for Carlsen, 1 for Caruana): "))
carlsen = float(input("Enter base strength for Carlsen: "))
caruana = float(input("Enter base strength for Caruana: "))

simulator = GameSimulator(starting_player, carlsen, caruana)
simulator.simulate_games()

class MindControlGame:
    def __init__(self, cost, light_strength, l_strength, starting_player):
        self.cost = cost
        self.light_strength = light_strength
        self.l_strength = l_strength
        self.starting_player = starting_player
        self.max_strength = light_strength if starting_player == 0 else l_strength
        self.min_strength = l_strength if starting_player == 0 else light_strength
        self.max_name = "Light" if starting_player == 0 else "L"
        self.pruner = AlphaBetaPruner(self.max_strength, self.min_strength)

    def mind_control_alphabeta(self, depth, alpha, beta):
        if depth == 5:
            return self.pruner.calculate_utility()
        value = -math.inf
        for i in range(2):
            max_min_val = -math.inf
            for i in range(2):
                child_value = self.mind_control_alphabeta(depth + 1, alpha, beta)
                max_min_val = max(max_min_val, child_value)
            value = max(value, max_min_val)
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return value

    def evaluate(self):
        regular_val = self.pruner.alphabeta(0, -math.inf, math.inf, True)
        mind_control_val = self.mind_control_alphabeta(0, -math.inf, math.inf)
        adjusted_val = mind_control_val - self.cost

        print(f"Minimax value without Mind Control: {regular_val:.2f}")
        print(f"Minimax value with Mind Control: {mind_control_val:.2f}")
        print(f"Minimax value with Mind Control after incurring the cost: {adjusted_val:.2f}")

        if regular_val > 0 and adjusted_val <= regular_val:
            print(f"\n{self.max_name} should NOT use Mind Control as the position is already winning.")
        elif adjusted_val > 0 and adjusted_val > regular_val:
            print(f"\n{self.max_name} should use Mind Control.")
        elif adjusted_val <= 0 and regular_val <= 0:
            print(f"\n{self.max_name} should NOT use Mind Control as the position is losing either way.")
        else:
            print(f"\n{self.max_name} should NOT use Mind Control as it backfires.")

print('\nMIND CONTROLLED CHESS GAME')
print()
starting_player = int(input("Enter who goes first (0 for Light, 1 for L): "))
cost = float(input("Enter the cost of using Mind Control: "))
light = float(input("Enter base strength for Light: "))
l = float(input("Enter base strength for L: "))

game = MindControlGame(cost, light, l, starting_player)
game.evaluate()