# -*- coding: utf-8 -*-
"""22141018_MD Fuyad Ibnay Rafi_12_CSE422_Assignment02

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VTz_mJjRIr7nOGXO3HvX7Wi2fCGnSsxE
"""

import random

def compute_profit(strategy, price_changes, initial_capital=1000):

    current_capital = initial_capital
    sl, tp , ts = strategy['stop_loss'], strategy['take_profit'], strategy['trade_size']

    for change in price_changes:
        investment = (ts / 100) * current_capital

        if change <= -sl:
            profit = -(sl / 100) * investment
        elif change >= tp:
            profit = (tp / 100) * investment
        else:
            profit = (change / 100) * investment

        current_capital += profit
    return current_capital - initial_capital

def mate(parent1, parent2):
    params = ['stop_loss', 'take_profit', 'trade_size']
    cross_ponit = random.randint(1, 2)
    child1, child2 = {}, {}

    for i in range(len(params)):
        param = params[i]
        if i < cross_ponit:
            child1[param], child2[param] = parent1[param], parent2[param]
        else:
            child1[param], child2[param] = parent2[param], parent1[param]
    X , Y = child1, child2
    return X, Y

def alter_gene(chromo):

    new_chromo = chromo.copy()
    for gene in new_chromo:
        x = random.random()
        if x < 0.05:
            new_chromo[gene] += random.uniform(-1, 1)
    return new_chromo


def evolve_population(pop, price_data, gens):

    for _ in range(gens):
        scores = []

        for s in pop:
          profit = compute_profit(s, price_data)
        scores.append((s, profit))
        sorted_pop = sorted(scores, key=lambda x: -x[1])
        new_pop = [sorted_pop[0][0]]
        i = 4

        while len(new_pop) < i:
            p1, p2 = random.choices(pop, k=2)
            c1, c2 = mate(p1, p2)
            c1, c2 = alter_gene(c1), alter_gene(c2)
            if len(new_pop) < 4:
              new_pop.append(c1)
            if len(new_pop) < 4:
              new_pop.append(c2)
        pop = new_pop

    def get_profit(chromosome):
      return compute_profit(chromosome, price_data)
    best = max(pop, key=get_profit)

    return best, compute_profit(best, price_data)

initial_pop = [
    {'stop_loss': 2, 'take_profit': 5, 'trade_size': 20},
    {'stop_loss': 3, 'take_profit': 7, 'trade_size': 30},
    {'stop_loss': 1.5, 'take_profit': 4, 'trade_size': 25},
    {'stop_loss': 2.5, 'take_profit': 6, 'trade_size': 15}
]
historical_prices = [-1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]

best_strat, profit = evolve_population(initial_pop, historical_prices, 10)
print("Part 1 Best Strategy:")
print(f"{best_strat}, Final Profit: {profit:.1f}")

def to_string(chromo):
    sl = int(round(chromo['stop_loss']))
    tp = int(round(chromo['take_profit']))
    ts = int(round(chromo['trade_size']))
    return f"{sl:02d}{tp:02d}{ts:02d}"

def from_string(s):
    return {
        'stop_loss': int(s[:2]),
        'take_profit': int(s[2:4]),
        'trade_size': int(s[4:6])
    }

def crossover(parent1, parent2):
    p1_str = to_string(parent1)
    p2_str = to_string(parent2)
    pt1 = random.randint(1, 2)
    pt2 = random.randint(4, 5)

    if pt1 >= pt2:
        pt1, pt2 = pt2, pt1

    p1_segment1, p1_segment2, p1_segment3 = p1_str[:pt1], p1_str[pt1:pt2], p1_str[pt2:]
    p2_segment1, p2_segment2, p2_segment3 = p2_str[:pt1], p2_str[pt1:pt2], p2_str[pt2:]

    o1 = "".join([p1_segment1, p2_segment2, p1_segment3])
    o2 = p2_segment1 + p1_segment2 + p2_segment3

    return from_string(o1), from_string(o2)


initial_pop = [
    {'stop_loss': 2, 'take_profit': 5, 'trade_size': 20},
    {'stop_loss': 3, 'take_profit': 7, 'trade_size': 30},
    {'stop_loss': 1.5, 'take_profit': 4, 'trade_size': 25},
    {'stop_loss': 2.5, 'take_profit': 6, 'trade_size': 15}
]
parent_a, parent_b = random.choices(initial_pop, k=2)
child1, child2 = crossover(parent_a, parent_b)
print("\nPart 2:")
print(f"Parent 1: {parent_a}")
print(f"Parent 2: {parent_b}")
print(f"Offspring 1: {child1}")
print(f"Offspring 2: {child2}")