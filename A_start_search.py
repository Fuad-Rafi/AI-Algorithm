# -*- coding: utf-8 -*-
"""22141018_MD Fuyad Ibnay Rafi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BcoILktah8HpZPNPcerv9_IHvYzPfD9j
"""

h_values = {}
graph = {}
file = open("input.txt", 'r')

for line in file:
    parts = line.strip().split()
    city = parts[0]
    heuristic = int(parts[1])
    h_values[city] = heuristic
    graph[city] = []

    for i in range(2, len(parts), 2):
        neighbor = parts[i]
        distance = int(parts[i + 1])
        graph[city].append((neighbor, distance))

start = input("Starting point: ")
end = input("Destination point: ")

if start not in graph or end not in graph:
    print("NO PATH FOUND")
    exit()

else:
  import heapq

  open_heap = []
  heapq.heappush(open_heap, (h_values[start], 0, start, [start]))
  g_scores = {}

  for city in graph:
      g_scores[city] = float('inf')
  g_scores[start] = 0

  final_path = []
  total_distance = 0

  while open_heap:
      total_cost, path_cost, current_city, current_path = heapq.heappop(open_heap)

      if current_city == end:
          final_path = current_path
          total_distance = path_cost
          break

      if path_cost > g_scores[current_city]:
          continue

      for neighbor, distance in graph[current_city]:
          tentative_g = path_cost + distance

          if tentative_g < g_scores[neighbor]:
              g_scores[neighbor] = tentative_g
              f_score = tentative_g + h_values[neighbor]
              new_path = current_path + [neighbor]
              heapq.heappush(open_heap, (f_score, tentative_g, neighbor, new_path))

  print("Path:", " -> ".join(final_path))
  print("Total distance:", total_distance, "km")